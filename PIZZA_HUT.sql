CREATE DATABASE PIZZA_HUT;

USE PIZZA_HUT;
SELECT 
    *
FROM
    PIZZAS;
SELECT 
    *
FROM
    PIZZA_TYPES;
SELECT 
    *
FROM
    ORDERS;
ALTER TABLE ORDERS MODIFY COLUMN DATE DATE;
ALTER TABLE ORDERS MODIFY COLUMN TIME TIME;
SELECT 
    *
FROM
    ORDER_DETAILS;


-- 1. Retrieve the total number of orders placed.
SELECT 
    COUNT(ORDER_ID) AS 'TOTAL NUMBER OF ORDER PLACED'
FROM
    ORDERS;

-- 2. Calculate the total revenue generated from pizza sales.
SELECT PIZZA_ID , COUNT(PIZZA_ID) AS 'TOTAL QUANTITY SALES OF DIFFERENT TYPES OF PIZZA'
FROM ORDER_DETAILS
GROUP BY PIZZA_ID;

SELECT ROUND(SUM(ORDER_DETAILS.QUANTITY * PIZZAS.PRICE),2) AS 'TOTAL REVENUE'
FROM ORDER_DETAILS
JOIN PIZZAS
ON PIZZAS.PIZZA_ID = ORDER_DETAILS.PIZZA_ID;

-- 3. Identify the highest-priced pizza.

SELECT 
    PIZZA_TYPE_ID, SIZE, PRICE
FROM
    PIZZAS
WHERE
    PRICE = (SELECT 
            MAX(PRICE)
        FROM
            PIZZAS);

-- 4. Identify the most common pizza size ordered.

SELECT 
    PIZZAS.SIZE AS 'MOST COMMON PIZZA SIZE ORDERED',
    COUNT(ORDER_DETAILS.ORDER_DETAILS_ID) AS 'NO. OF TIMES ORDERED'
FROM
    PIZZAS
        JOIN
    ORDER_DETAILS ON PIZZAS.PIZZA_ID = ORDER_DETAILS.PIZZA_ID
GROUP BY PIZZAS.SIZE
ORDER BY COUNT(ORDER_DETAILS.ORDER_DETAILS_ID) DESC
LIMIT 1;


-- 5. List the top 5 most ordered pizza types along with their quantities.

SELECT 
    PIZZA_TYPES.NAME AS 'MOST ORDERD PIZZAS',
    SUM(ORDER_DETAILS.QUANTITY) AS 'NO. OF TIMES ORDERED'
FROM
    PIZZA_TYPES
        JOIN
    PIZZAS ON PIZZA_TYPES.PIZZA_TYPE_ID = PIZZAS.PIZZA_TYPE_ID
        JOIN
	ORDER_DETAILS ON PIZZAS.PIZZA_ID = ORDER_DETAILS.PIZZA_ID 
GROUP BY PIZZA_TYPES.NAME
ORDER BY SUM(ORDER_DETAILS.QUANTITY) DESC
LIMIT 5;

-- 6. Join the necessary tables to find the total quantity of each pizza category ordered.

SELECT 
    PIZZA_TYPES.CATEGORY AS 'PIZZA TYPES',
    SUM(ORDER_DETAILS.QUANTITY) AS 'QUANTITY OF ORDERED'
FROM
    PIZZA_TYPES
        JOIN
    PIZZAS ON PIZZA_TYPES.PIZZA_TYPE_ID = PIZZAS.PIZZA_TYPE_ID
        JOIN
	ORDER_DETAILS ON PIZZAS.PIZZA_ID = ORDER_DETAILS.PIZZA_ID 
GROUP BY PIZZA_TYPES.CATEGORY
ORDER BY SUM(ORDER_DETAILS.QUANTITY) DESC;

-- 7. Determine the distribution of orders by hour of the day.

SELECT 
    HOUR(TIME), COUNT(ORDER_ID) AS 'ORDER COUNT'
FROM
    ORDERS
GROUP BY HOUR(TIME);

-- 8. Join relevant tables to find the category-wise distribution of pizzas.

SELECT 
    CATEGORY, COUNT(NAME) AS PIZZA_TYPES
FROM
    PIZZA_TYPES
GROUP BY CATEGORY;
-- 9. Group the orders by date and calculate the average number of pizzas ordered per day.

SELECT 
    AVG(ORDER_QUANTITY_EACH_DAY)
FROM
    (SELECT 
        ORDERS.DATE,
            SUM(ORDER_DETAILS.QUANTITY) AS ORDER_QUANTITY_EACH_DAY
    FROM
        ORDERS
    JOIN ORDER_DETAILS ON ORDERS.ORDER_ID = ORDER_DETAILS.ORDER_ID
    GROUP BY DATE) AS ORDER_QUANTITY;

-- 10. Determine the top 3 most ordered pizza types based on revenue.

SELECT 
    PIZZA_TYPES.NAME,
    ROUND(SUM(PIZZAS.PRICE * ORDER_DETAILS.QUANTITY),
            2) AS TOP_REVENUE_PIZZAS
FROM
    ORDER_DETAILS
        JOIN
    PIZZAS ON PIZZAS.PIZZA_ID = ORDER_DETAILS.PIZZA_ID
        JOIN
    PIZZA_TYPES ON PIZZA_TYPES.PIZZA_TYPE_ID = PIZZAS.PIZZA_TYPE_ID
GROUP BY PIZZA_TYPES.NAME
ORDER BY TOP_REVENUE_PIZZAS DESC
LIMIT 3;


-- 11. Calculate the percentage contribution of each pizza type to total revenue.

SELECT 
    PIZZA_TYPES.CATEGORY AS PIZZA_CATEGORY,
    ROUND((SUM(PIZZAS.PRICE * ORDER_DETAILS.QUANTITY) * 100) / (SELECT 
                    ROUND(SUM(ORDER_DETAILS.QUANTITY * PIZZAS.PRICE),
                                2)
                FROM
                    ORDER_DETAILS
                        JOIN
                    PIZZAS ON PIZZAS.PIZZA_ID = ORDER_DETAILS.PIZZA_ID),
            2) AS PERCENT_WISE_CONTIBUTION_TO_TOTAL_REVENUE
FROM
    ORDER_DETAILS
        JOIN
    PIZZAS ON PIZZAS.PIZZA_ID = ORDER_DETAILS.PIZZA_ID
        JOIN
    PIZZA_TYPES ON PIZZA_TYPES.PIZZA_TYPE_ID = PIZZAS.PIZZA_TYPE_ID
GROUP BY PIZZA_TYPES.CATEGORY
ORDER BY PERCENT_WISE_CONTIBUTION_TO_TOTAL_REVENUE DESC;


-- 12. Analyze the cumulative revenue generated over time.

SELECT ORDER_DATE, 
SUM(REVENUE_EACH_DAY) OVER(ORDER BY ORDER_DATE) AS CUM_SUM_REVENUE
FROM
(SELECT ORDERS.DATE AS ORDER_DATE, ROUND(SUM(ORDER_DETAILS.QUANTITY * PIZZAS.PRICE),2) AS REVENUE_EACH_DAY
FROM ORDERS
JOIN ORDER_DETAILS
ON ORDERS.ORDER_ID = ORDER_DETAILS.ORDER_ID
JOIN PIZZAS
ON ORDER_DETAILS.PIZZA_ID = PIZZAS.PIZZA_ID
GROUP BY ORDERS.DATE) AS SALES_EACH_DAY ;


-- 13. Determine the top 3 most ordered pizza types based on revenue for each pizza category.

SELECT 
    PIZZA_TYPES.NAME AS PIZZA_NAMES,
    PIZZA_TYPES.CATEGORY AS PIZZA_CATEGORY
FROM
    ORDER_DETAILS
        JOIN
    PIZZAS ON PIZZAS.PIZZA_ID = ORDER_DETAILS.PIZZA_ID
        JOIN
    PIZZA_TYPES ON PIZZA_TYPES.PIZZA_TYPE_ID = PIZZAS.PIZZA_TYPE_ID
GROUP BY PIZZA_TYPES.NAME , PIZZA_TYPES.CATEGORY
ORDER BY ROUND(SUM(PIZZAS.PRICE * ORDER_DETAILS.QUANTITY),
        2) DESC
LIMIT 3;

-- 14. Calculate the total revenue for each date and group by time slots (e.g., morning, afternoon, evening)
--     to find the busiest and highest revenue time slots.

SELECT 
    O.DATE,
    CASE
        WHEN TIME(O.TIME) BETWEEN '00:00:00' AND '11:59:59' THEN 'MORNING'
        WHEN TIME(O.TIME) BETWEEN '12:00:00' AND '17:59:59' THEN 'EVENING'
        WHEN TIME(O.TIME) BETWEEN '18:00:00' AND '23:59:59' THEN 'NIGHT'
    END AS TIME_SLOT,
    SUM(OD.QUANTITY * P.PRICE) AS TOTAL_REVENUE
FROM
    ORDERS O
        JOIN
    ORDER_DETAILS OD ON OD.ORDER_ID = O.ORDER_ID
        JOIN
    PIZZAS P ON P.PIZZA_ID = OD.PIZZA_ID
GROUP BY O.DATE , TIME_SLOT
ORDER BY TOTAL_REVENUE DESC
LIMIT 10;

-- 15. Create a query to show the growth rate of total sales for each day compared to the previous day.

WITH TOTAL_SALES_OF_EACH_DAY AS 
(SELECT
	O.DATE,
    SUM(OD.QUANTITY * P.PRICE) AS SALES_EACH_DAY
FROM
    ORDERS O
        JOIN
    ORDER_DETAILS OD ON OD.ORDER_ID = O.ORDER_ID
        JOIN
    PIZZAS P ON P.PIZZA_ID = OD.PIZZA_ID
GROUP BY
    O.DATE
),
SALES_GROWTH AS
(SELECT
    T1.DATE,
	T1.SALES_EACH_DAY AS 'CURRENT_DAY_SALES',
    T2.SALES_EACH_DAY AS 'PREVIOUS_DAY_SALES',
    (T1.SALES_EACH_DAY - T2.SALES_EACH_DAY) AS 'DAY_OVER_DAY_GROWTH'
FROM
    TOTAL_SALES_OF_EACH_DAY T1
LEFT JOIN 
	TOTAL_SALES_OF_EACH_DAY T2 ON T1.DATE = T2.DATE + 1
)
SELECT
    DATE,
    ROUND(CURRENT_DAY_SALES,3) AS 'CURRENT_DAY_SALES',
    ROUND(PREVIOUS_DAY_SALES,3) AS 'PREVIOUS_DAY_SALES',
    ROUND(DAY_OVER_DAY_GROWTH,3) AS 'DAY_OVER_DAY_GROWTH'
FROM
    SALES_GROWTH
ORDER BY
    DATE;

-- 16. Identify customers who place multiple orders and determine their most frequently ordered pizza types.

WITH ORDER_QNTY_EACH_CUSTOMER AS
(SELECT 
	ORDER_ID,
    SUM(QUANTITY) AS 'TOTAL_QNTY_OF_EACH_CUSTOMER'
FROM
    ORDER_DETAILS
GROUP BY
    ORDER_ID
ORDER BY
	TOTAL_QNTY_OF_EACH_CUSTOMER DESC
LIMIT 50
),
PIZZA_TYPE_QUNTY AS (
SELECT
    OD.ORDER_ID,
    P.PIZZA_TYPE_ID,
    PT.NAME AS PIZZA_NAMES,
    SUM(OD.QUANTITY) AS 'QNTY_OF_PIZZA_TYPE'
FROM
    ORDER_DETAILS OD
JOIN ORDER_QNTY_EACH_CUSTOMER OQ 
ON OD.ORDER_ID = OQ.ORDER_ID
JOIN PIZZAS P
ON OD.PIZZA_ID = P.PIZZA_ID
JOIN PIZZA_TYPES PT
ON P.PIZZA_TYPE_ID = PT.PIZZA_TYPE_ID
GROUP BY
    OD.ORDER_ID,
    P.PIZZA_TYPE_ID,
	PT.NAME
),
MOST_FREQUENT_PIZAA AS (
SELECT
    ORDER_ID,
    PIZZA_TYPE_ID,
    PIZZA_NAMES,
    QNTY_OF_PIZZA_TYPE,
    RANK() OVER (PARTITION BY ORDER_ID ORDER BY QNTY_OF_PIZZA_TYPE  DESC) AS 'RANK_'
FROM 
    PIZZA_TYPE_QUNTY
)
SELECT
     ORDER_ID,
    PIZZA_TYPE_ID AS 'MOST_FREQUENT_PIZZA_TYPE',
    PIZZA_NAMES,
    QNTY_OF_PIZZA_TYPE
FROM
    MOST_FREQUENT_PIZAA
WHERE
    RANK_ = 1
ORDER BY
	QNTY_OF_PIZZA_TYPE DESC;
    
-- 17. Find dates with the highest revenue over a period. This could be used to plan future promotional events.

SELECT 
    O.DATE,
    ROUND(SUM(OD.QUANTITY * P.PRICE), 3) AS SALES_EACH_DAY
FROM
    ORDERS O
        JOIN
    ORDER_DETAILS OD ON OD.ORDER_ID = O.ORDER_ID
        JOIN
    PIZZAS P ON P.PIZZA_ID = OD.PIZZA_ID
GROUP BY O.DATE
ORDER BY SALES_EACH_DAY DESC
LIMIT 30;


-- 18. Given a specific ingredient (e.g., mushrooms), find the total quantity of pizzas that contain this ingredient sold over time.

SELECT
     O.DATE,
     SUM(OD.QUANTITY) AS 'MUSHROOM_CONTAINS_PIZZA_ORDERED'
FROM
    ORDERS O 
JOIN ORDER_DETAILS OD
ON O.ORDER_ID = OD.ORDER_ID
JOIN PIZZAS P
ON OD.PIZZA_ID = P.PIZZA_ID
JOIN PIZZA_TYPES PT
ON P.PIZZA_TYPE_ID = PT.PIZZA_TYPE_ID
WHERE PT.INGREDIENTS LIKE  '%MUSHROOMS%'
GROUP BY
	  O.DATE;


    